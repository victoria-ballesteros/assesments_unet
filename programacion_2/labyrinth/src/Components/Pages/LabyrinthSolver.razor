@page "/fileUpload"
@inject IJSRuntime JS
@rendermode InteractiveServer
@using System.Net.Http.Headers

<PageTitle>Labyrinth</PageTitle>

<section class="bg-blue pt-5 pb-10">
    <div class="flex m-10">
        <h1 class="text-6xl">Upload Labyrinth</h1>
    </div>
    <div class="flex pl-10">
        <InputFile OnChange="@OnInputFileChange" />
    </div>
</section>
<section class="flex justify-center gap-10 pt-5">
    <div>
        @if (fileContent != null)
        {
            <h2 class="pb-3">Contenido a procesar:</h2>
            <pre>@fileContent</pre>
        }
    </div>
    <div>
        @if (final != null)
        {
            <h2 class="pb-3">Contenido procesado:</h2>
            <ul>
                @foreach (var item in final)
                {
                    <li>@item</li>
                }
            </ul>
        }
    </div>
</section>
<section class="flex justify-center pt-3">
    <div>
        @if (final != null)
        {
            <button @onclick="DownloadFileFromURL"
                class="relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-deep-blue to-blue group-hover:from-green-400 group-hover:to-blue-600 hover:text-white dark:text-white focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800">
                <span
                    class="relative px-5 py-2.5 transition-all ease-in duration-75 bg-white dark:bg-gray-900 rounded-md group-hover:bg-opacity-0">
                    Donwload solution
                </span>
            </button>
        }
    </div>
</section>

@code
{
    private string fileContent;
    private Labyrinth labyrinth = new Labyrinth();
    private List<string> final;
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        long maxsize = 512000;
        var buffer = new byte[file.Size];
        await file.OpenReadStream(maxsize).ReadAsync(buffer);
        fileContent = System.Text.Encoding.UTF8.GetString(buffer);
        string[] lines = fileContent.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);
        List<string> lineList = new List<string>(lines);
        final = labyrinth.resolverLaberinto(lineList);
    }
    private async Task DownloadFileFromURL()
    {
        var fileName = "laberinto.txt";
        var fileURL = "/file/laberinto.txt";
        await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
    }
}
